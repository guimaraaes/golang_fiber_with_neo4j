basePath: /
definitions:
  model.Movie:
    properties:
      released:
        type: integer
      tagline:
        type: string
      title:
        description: gorm.Model
        type: string
    type: object
  model.Person:
    properties:
      born:
        type: integer
      name:
        type: string
    type: object
  model.PersonKNOWSPerson:
    properties:
      ano:
        description: RelationType string `json:"relationship_type"`
        type: string
      mes:
        type: string
      p1:
        $ref: '#/definitions/model.Person'
      p2:
        $ref: '#/definitions/model.Person'
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: fiber aplication with neo4j
  version: "1.0"
paths:
  /algo_centrality/{node}/{relationship}:
    get:
      parameters:
      - description: Node type
        in: path
        name: node
        required: true
        type: string
      - description: Relationship projection
        in: path
        name: relationship
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show centrality nodes
      tags:
      - algorithms
  /algo_community/{node}/{relationship}:
    get:
      parameters:
      - description: Node type
        in: path
        name: node
        required: true
        type: string
      - description: Relationship projection
        in: path
        name: relationship
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show comunity nodes
      tags:
      - algorithms
  /algo_pagerank/{node}/{relationship}:
    get:
      parameters:
      - description: Node type
        in: path
        name: node
        required: true
        type: string
      - description: Relationship projection
        in: path
        name: relationship
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show page rank nodes
      tags:
      - algorithms
  /algo_path/{node}/{relationship}:
    get:
      parameters:
      - description: Node type
        in: path
        name: node
        required: true
        type: string
      - description: Relationship projection
        in: path
        name: relationship
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show path nodes
      tags:
      - algorithms
  /movie:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show all movies
      tags:
      - movie
  /movie/:
    post:
      parameters:
      - description: Movie model
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Create a movies
      tags:
      - movie
  /movie/{title}/{released}:
    delete:
      parameters:
      - description: Movie name
        in: path
        name: title
        required: true
        type: string
      - description: Movie released year
        in: path
        name: released
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Delete a movie
      tags:
      - movie
    get:
      parameters:
      - description: Movie name
        in: path
        name: title
        required: true
        type: string
      - description: Movie released year
        in: path
        name: released
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Get movie by id
      tags:
      - movie
    put:
      parameters:
      - description: Movie name
        in: path
        name: title
        required: true
        type: string
      - description: Movie released year
        in: path
        name: released
        required: true
        type: integer
      - description: Movie model
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Edit a movies
      tags:
      - movie
  /person:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Show all persons
      tags:
      - person
  /person/:
    post:
      parameters:
      - description: Person model
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/model.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Create a person
      tags:
      - person
  /person/{name}/{born}:
    delete:
      parameters:
      - description: name Person
        in: path
        name: name
        required: true
        type: string
      - description: year person born
        in: path
        name: born
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Delete a person
      tags:
      - person
    get:
      parameters:
      - description: name Person
        in: path
        name: name
        required: true
        type: string
      - description: year person born
        in: path
        name: born
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Get person by id
      tags:
      - person
    put:
      parameters:
      - description: name Person
        in: path
        name: name
        required: true
        type: string
      - description: year person born
        in: path
        name: born
        required: true
        type: integer
      - description: Person model
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/model.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Edit a person
      tags:
      - person
  /person/GETwith_relationship:
    post:
      parameters:
      - description: name Person
        in: body
        name: pKp
        required: true
        schema:
          $ref: '#/definitions/model.PersonKNOWSPerson'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Get person by relationship
      tags:
      - person
  /person/with_relationship:
    post:
      parameters:
      - description: Relationship model
        in: body
        name: pKp
        required: true
        schema:
          $ref: '#/definitions/model.PersonKNOWSPerson'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Create a person with relationship
      tags:
      - person
swagger: "2.0"
